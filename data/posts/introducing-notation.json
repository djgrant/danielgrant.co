{
  "slug": "introducing-notation",
  "title": "Introducing Notation",
  "date": "2023-07-06",
  "status": "Published",
  "summary": "Notation frees developers from worrying about infrastructure, and lets them focus on building useful software.",
  "minutes": 3,
  "content": "<p>This weekend I launched a sneak peek of a project I’ve been working on.</p>\n<p><a href=\"https://notation.dev/\">Notation</a> is a backend framework that compiles TypeScript to fully functional cloud applications. It frees developers from worrying about infrastructure, and lets them focus on building useful software.</p>\n<h2>Motivation</h2>\n<p>The idea emerged a couple of years ago. I was building an analytics engine and chose a monolithic tech stack, based around Postgres. This enabled rapid development, but as the product started growing, so did the list of scaling issues.</p>\n<p>I’ve always been hesitant to start projects with a serverless/microservices architecture, and refactoring that analytics project reminded me why – developing cloud-native software has major overheads. This is partly because distributed systems are more complex, but also because cloud platforms have poor developer experience.</p>\n<figure class=\"\"><img src=\"/images/pages/69e19f14-2682-485d-a9e5-077ff154a3ec/you-went-straight-to-the-dark.png\" alt=\"Choosing microservices for a greenfield project is rarely the right choice\"><figcaption>Choosing microservices for a greenfield project is rarely the right choice</figcaption></figure>\n<p>So, a proposition was conceived: make developing cloud-native software as productive (and fun) as developing a monolith. If successful, Notation will be the right choice at both the start of a project and as it scales up.</p>\n<h2>Hello World</h2>\n<p>Here’s the code for a serverless function that is triggered by an API endpoint:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> lambda<span class=\"token punctuation\">,</span> apiGateway <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@notation/aws\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">DoSomething</span> <span class=\"token operator\">=</span> <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token function\">apiGateway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PostMessage</span> <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  route<span class=\"token operator\">:</span> <span class=\"token string\">\"/message\"</span><span class=\"token punctuation\">,</span>\n  handler<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DoSomething</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Behind the scenes, Notation infers – based on the relationship between the two resources – that it needs to set up some other resources: a <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html\">proxy integration</a>, a <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html\">lambda permission</a>, an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html\">IAM role</a>, and a <a href=\"https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AWSLambdaBasicExecutionRole.html\">policy attachment</a>.</p>\n<p>That’s a lot of configuration – even for this simple example – that the developer didn’t need to manage with infrastructure-as-code.</p>\n<h3>Type Safety</h3>\n<p>Application and infrastructure concerns are declared in the same type space. This allows the TypeScript compiler to ensure cloud services are compatible. (For example, the compiler would not allow you to put an Azure Function behind an AWS API Gateway).</p>\n<p>Data passed between services can also be typed using a library like <a href=\"https://zod.dev/\">Zod</a>.</p>\n<h3>Distributed Workflows</h3>\n<p>Serverless functions can be composed in ways that would normally require, either a lot of duct tape, or a library like Kafka or Airflow.</p>\n<p>Workflow code is intuitive and programmatic:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> workflow <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@notation/azure\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">GetUsers</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../functions/get-users.ts\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">SendSms</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"../functions/send-sms.ts\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\">workflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">GetUsers</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">batch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> size<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">SendSms</span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The workflow code is evaluated at build time and generates a static definition of the workflow. In production, this is consumed by a workflow engine to determine how to execute and pass data between serverless functions.</p>\n<p>Workflows are a powerful feature that open up a wide variety of use-cases:</p>\n<ul>\n<li>pipelines for processing events and data</li>\n<li>integrations for streaming chatbot responses across services</li>\n<li>automations that enable GDPR compliance</li>\n<li>media transcoders for optimising images and video</li>\n</ul>\n<h2>Release</h2>\n<p>Notation will be released as an open source project. There are lots of interesting challenges ahead, and I’m looking forward to working through them with the developer community.</p>\n<p>If this sounds interesting to you, <a href=\"https://notation.dev/#sign-up\">sign up for early access</a>. And, if you have any questions or feedback, drop me a message!</p>"
}
